// This file is generated by Firebase Studio.
'use server';
/**
 * @fileOverview Implements the WhatsApp Consult flow, providing access to MediBot functionality within WhatsApp.
 *
 * - whatsappConsult - A function that handles the WhatsApp consult process.
 * - WhatsAppConsultInput - The input type for the whatsappConsult function.
 * - WhatsAppConsultOutput - The return type for the whatsappConsult function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const WhatsAppConsultInputSchema = z.object({
  query: z.string().describe('The user query or message from WhatsApp.'),
  photoDataUri: z
    .string()
    .optional()
    .describe(
      "An optional photo related to the query, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
});
export type WhatsAppConsultInput = z.infer<typeof WhatsAppConsultInputSchema>;

const WhatsAppConsultOutputSchema = z.object({
  response: z.string().describe('The MediBot response to the user query.'),
});
export type WhatsAppConsultOutput = z.infer<typeof WhatsAppConsultOutputSchema>;

export async function whatsappConsult(input: WhatsAppConsultInput): Promise<WhatsAppConsultOutput> {
  return whatsappConsultFlow(input);
}

const prompt = ai.definePrompt({
  name: 'whatsappConsultPrompt',
  input: {schema: WhatsAppConsultInputSchema},
  output: {schema: WhatsAppConsultOutputSchema},
  prompt: `You are MediBot, a helpful AI assistant providing health support within WhatsApp.

  Respond to the user query with helpful and informative health advice. If a photo is provided, analyze it to provide a more accurate response.

  User Query: {{{query}}}
  {{#if photoDataUri}}
  Photo: {{media url=photoDataUri}}
  {{/if}}
  `,
});

const whatsappConsultFlow = ai.defineFlow(
  {
    name: 'whatsappConsultFlow',
    inputSchema: WhatsAppConsultInputSchema,
    outputSchema: WhatsAppConsultOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
